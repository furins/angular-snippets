'.source.js':
  'Factory':
    'prefix': '_fl'
    'body': """
      (function() {

        'use strict';

        var app = angular.module('nova'),
            factoryId = '${1:name}sFactory';

        app.factory(factoryId, ['config', 'Restangular', '$q', factory]);

        function factory(config, restangular, $q) {

          var baseUrl = config.endpoints.${2:inventory} + "/${1:name}";

          function ${3:class}() {
            this._initialize();
          }

          ${3:class}.prototype = {

            ///////////////////////////////////////////////
            // Public Methods                            //
            ///////////////////////////////////////////////

            _cache: [],

            ///////////////////////////////////////////////
            // Public Methods                            //
            ///////////////////////////////////////////////

            /**
            * Search for ${1:name}s
            *
            * @method search
            **/
            search: function(payload) {
              return this._search(payload);
            },
            /**
            * Remove a ${1:name}
            *
            * @method remove
            **/
            remove: function(${1:name}) {
              ${1:name}.remove().then(function() {
                _.remove(this._cache, ${1:name});
              });
            },

            ///////////////////////////////////////////////
            // Private Methods                           //
            ///////////////////////////////////////////////

            /**
            * Initialize ${1:name}s
            *
            * @private
            * @method _initialize
            **/
            _initialize: function() {

            },


            ///////////////////////////////////////////////
            // Server Calls                              //
            ///////////////////////////////////////////////

            /**
            * Call server search
            *
            * @private
            * @method _search
            * @param {payload} search parameters
            **/
            _search: function() {
              var d = $q.defer();

              restangular.setBaseUrl(baseUrl)
                .one('${1:name}s')
                .get(payload).then(function(response) {
                  // wrap the results into ${1:name}'s objects
                  this._cache = [];
                  var promises = _.map(response.results, function(raw${1:name}) {
                    return new ${1:name}Factory.${1:name}(raw${1:name}).then(function(${1:name}) {
                      this._cache.push(${1:name});
                    });
                  });
                  $q.all(this._cache).then(function() {
                    d.resolve({
                      total: response.total,
                      results: this._cache
                    });
                  });

                });

              return d.promise;
            },

          }

          return {
            ${3:class}: ${3:class}
          }
        }
      })();
      """
